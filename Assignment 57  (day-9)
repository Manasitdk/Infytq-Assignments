#PF-Assgn-57
def check_prime(number):
    #remove pass and write your logic here. if the number is prime return true, else return false
    if number<=1:
        return False
    for i in range(2,number//2):
        if number%i==0:
            return False
    return True        

def rotations(number):
    #remove pass and write your logic here. It should return the list of different combinations of digits of the given number.
	#Rotation should be done in clockwise direction. For example, if the given number is 197, the list returned should be [197, 971, 719]
	for i in range(len(str(number))):
	    l=[d for d in str(number)]
	    l=l[i:len(str(number))]+l[:i]
	    if not check_prime(int("".join(l))):
	        return False
	        
	return True      
	    

def get_circular_prime_count(limit):
    #remove pass and write your logic here.It should return the count of circular prime numbers below the given limit.
    l=[]
    for i in range(limit):
        if rotations(i):
            l.append(i)
    return l        

#Provide different values for limit and test your program
print(get_circular_prime_count(100))
